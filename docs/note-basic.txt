1) 렌더링 방식 [(웹 브라우저) - (프론트엔드) - (백엔드) - (데이터베이스)]
- 서버 사이드 렌더링 방식 (SSR)
- 웹 브라우저에서 웹 페이지를 요청하면,
  프론트엔드가 먼저 받고, 백엔드(+ DB)로 전달해서 데이터를 받아 온다.
  (그리고 역순으로 데이터를 전달한다.)

- 클라이언트 사이드 렌더링 (CSR; SPA)
- 웹 브라우저에서 웹 페이지를 요청하면,
  프론트엔드는 html(1개), js(1개), 그리고 css, image 등을 웹 브라우저로 전달한다.
  (데이터가 없는 상태이므로 웹 브라우저에서는 웹 페이지 구조가 보이지만
  로딩바, 스켈레톤 등으로 데이터를 받아 오는 중이라는 점을 알 수 있다.)
  (그리고 백엔드에 데이터를 요청한다.)

- 프론트엔드에 요청을 보내는지, 백엔드에 요청을 보내는지를 명확히 구분해야 한다.

2) 렌더링 방식의 장단점
- SSR은 DB까지 데이터를 요청해서 받고 렌더링을 하므로 느리다.
- CSR은 FE에서 기본적인 웹 페이지를 보여주고 BE로 데이터를 요청하므로 사용자 관점에서 빠르다는 느낌을 받을 수 있다.
(CSR이 더 느릴 수도 있는데, 앞으로 사용할 컴포넌트 등의 요소들도 모두 가져와야 하기 때문이다.)

- 사용자와 빠른 상호작용이 요구될 때, CSR(React, Vue, Angular)을 사용한다.
(3초 이내에 무엇이라도 보여질 때, 사용자는 이탈하지 않고 인내심을 갖고 기다리기 때문이다.)
- 검색 엔진은 SPA 웹에서 로딩바만 확인하고 검색 순위를 낮추는 단점이 있다.
(로딩바를 제외하고 데이터가 없기 때문이다.)
(구글 검색 엔진은 SPA 앱임을 구분하고 BE까지 데이터 요청을 기다려 준다.)

- 검색 엔진 최적화를 위해 SSR 또는 Code spliting 방식을 써야 한다.
(Next.js를 쓰면 된다.)
(React로만 SSR을 구현하고 싶다면 직접 만들거나 reactGo를 사용한다.)

3) 언제 Next.js(SSR)를 써야 하는가?
- B2C 서비스
(Admin 페이지는 검색 엔진에 노출될 필요도 없고 사용자(관리자 말고)와 상호작용도 중요하지 않으므로 SPA를 쓰자.)

4) Next.js를 사용한 실제 사례?
- 섹션 0의 실전 예제와 준비사항 강의를 본다.